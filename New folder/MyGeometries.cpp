//
//  MyGeometries.cpp - Fall 2022
//
//   Sets up and renders 
//     - the ground plane, and
//     - the surface of rotation
//   for the Math 155A project #6.
//


// Use the static library (so glew32.dll is not needed):
#define GLEW_STATIC
#include "glew.h" 
#include "glfw3.h"

#include "LinearR3.h"		// Adjust path as needed.
#include "LinearR4.h"		// Adjust path as needed.
#include "MathMisc.h"       // Adjust path as needed

#include "MyGeometries.h"
#include "TextureProj.h"
#include "PhongData.h"
#include "RgbImage.h"
#include "GlGeomCylinder.h"
#include "GlGeomSphere.h"
#include "GlGeomTorus.h"

// **********************************
// Material to underlie a texture map.
// YOU MAY DEFINE A SECOND ONE OF THESE IF YOU WISH
// **********************************
phMaterial materialUnderTexture;

// **************************
// Information for loading textures
// **************************
const int NumTextures = 33;
unsigned int TextureNames[NumTextures];     // Texture names generated by OpenGL
const char* TextureFiles[NumTextures] = {
   "darkwood.bmp",
    "lightwood.bmp",
    "clouds.bmp",
    "nyan2.bmp",
    "floor.bmp",
    "nyan1.bmp",
    "star.bmp",
    "metal.bmp",
    "darkwood2.bmp",
    "silk.bmp",
    "blackmetal.bmp",
    "panel.bmp",
    "speaker.bmp",
    "counter.bmp",
    "shinyblack",
    "navy.bmp",
    "linen.bmp",
    "whitewood.bmp",
    "ceramic.bmp",
    "books.bmp",
    "clock.bmp",
    "basketball.bmp",
    "projector.bmp",
    "sambuss.bmp",
    "youtube.bmp",
    "netflix.bmp",
    "mtc.bmp",
    "aot.bmp",
    "painting1.bmp",
    "painting2.bmp",
    "painting3.bmp",
    "blanket.bmp",
    "circle.bmp"


};

// *******************************
// For spheres and a cylinder and a torus (Torus is currently not used.)
// *******************************
GlGeomSphere texSphere(4, 4);
GlGeomCylinder texCylinder(4, 4, 4);
GlGeomTorus texTorus(4, 4, 0.75);   


// ************************
// General data helping with setting up VAO (Vertex Array Objects)
//    and Vertex Buffer Objects.
// ***********************
const int NumObjects = 10;
const int iFloor = 0;
const int iCircularSurf = 1;
const int iWall = 2;            // RESERVED FOR USE BY 155A PROJECT
const int iLeft = 3;
const int iRight = 4;
const int iBase = 5;
const int iBaseTop = 6;
const int iBed = 7;



unsigned int myVBO[NumObjects];  // a Vertex Buffer Object holds an array of data
unsigned int myVAO[NumObjects];  // a Vertex Array Object - holds info about an array of vertex data;
unsigned int myEBO[NumObjects];  // a Element Array Buffer Object - holds an array of elements (vertex indices)

// ********************************************
// This sets up for texture maps. It is called only once
// ********************************************
void SetupForTextures()
{
    // This material goes under the textures.
    // IF YOU WISH, YOU MAY DEFINE MORE THAN ONE OF THESE FOR DIFFERENT GEOMETRIES
    materialUnderTexture.SpecularColor.Set(0.9, 0.9, 0.9);
    materialUnderTexture.AmbientColor.Set(0.3, 0.3, 0.3);
    materialUnderTexture.DiffuseColor.Set(0.7, 0.7, 0.7);       // Increase or decrease to adjust brightness
    materialUnderTexture.SpecularExponent = 40.0;

    // ***********************************************
    // Load texture maps
	// ***********************************************
    RgbImage texMap;

    glUseProgram(shaderProgramBitmap);
    glActiveTexture(GL_TEXTURE0);
    glGenTextures(NumTextures, TextureNames);
    for (int i = 0; i < NumTextures; i++) {
        texMap.LoadBmpFile(TextureFiles[i]);            // Read i-th texture from the i-th file.
        glBindTexture(GL_TEXTURE_2D, TextureNames[i]);  // Bind (select) the i-th OpenGL texture

        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

        // Set best quality filtering.   Also see below for disabling mipmaps.
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
        // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.

        // Store the texture into the OpenGL texture named TextureNames[i]
        int textureWidth = texMap.GetNumCols();
        int textureHeight = texMap.GetNumRows();
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
 #if 1
        // Use mipmaps  (Best!)
        glGenerateMipmap(GL_TEXTURE_2D);
#else
        // Don't use mipmaps.  Try moving away from the brick wall a great distance
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif

    }

    // Make sure that the shaderProgramBitmap uses the GL_TEXTURE_0 texture.
    glUseProgram(shaderProgramBitmap);
    glUniform1i(glGetUniformLocation(shaderProgramBitmap, "theTextureMap"), 0);
    glActiveTexture(GL_TEXTURE0);


}

// **********************
// This sets up geometries needed for 
//   (a) the floor (ground plane)
//   (b) the back wall
//   (c) the circular mesh
//   (d) two spheres
//   (e) one cylinder
//  It is called only once.
//  YOU NEED TO CHANGE THIS ONCE YOU ADD THE TEXTURE COORDINATES TO THE CIRCULAR SURFACE.
// **********************
void MySetupSurfaces() {

    texSphere.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texCylinder.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
    texTorus.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);

    // Initialize the VAO's, VBO's and EBO's for the ground plane, the back wall
    // and the surface of rotation. Gives them the "vertPos" location,
    // and the "vertNormal"  and the "vertTexCoords" locations in the shader program.
    // No data is loaded into the VBO's or EBO's for the circular surface until the "Remesh"
    //   routines is called

    glGenVertexArrays(NumObjects, &myVAO[0]);
    glGenBuffers(NumObjects, &myVBO[0]);
    glGenBuffers(NumObjects, &myEBO[0]);

    // For the Floor:
    // Allocate the needed Vertex Array Objects (VAO's),
    //      Vertex Buffer Objects (VBO's) and Element Array Buffer Objects (EBO's)
    // Since the floor has only four vertices.  Each vertex stores its
    //    position, its normal (0,1,0) and its (s,t)-coordinates.
    // YOU DO NOT NEED TO REMESH THE FLOOR (OR THE BACK WALL) SINCE WE USE PHONG INTERPOLATION
    float floorVerts[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         
         5.0f, 0.0f, -5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f, 
         -5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,
         5.0f, 0.0f,  5.0f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,                 
    };
    unsigned int floorElts[] = { 0, 2, 1, 3 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor]);
    glBindVertexArray(myVAO[iFloor]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts), floorVerts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3*sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts), floorElts, GL_STATIC_DRAW);

    // For the circular surface:
    // Allocate the needed VAO, VBO< EBO
    // The normal vectors is specified separately for each vertex. (It is not a generic attribute.)
    // YOU MUST MODIFY THIS TO (A) USE STRIDES OF 8 *sizeof(float), (B) COMMENT IN THE LINES FOR vertTexCoords 
    glBindVertexArray(myVAO[iCircularSurf]);
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCircularSurf]);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCircularSurf]);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	// Store vertices in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float))); // Store normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);                                 // Enabled the stored normals (so they are not generic)
    // ONCE YOU HAVE TEXTURE COORDINATES WORKING FOR THE CIRCULAR SURFACE,
    //   PUT THE NEXT TWO LINES BACK IN, AND CHANGE THE STRIDE FACTOR TO "8" IN THE PREVIOUS CALLS TO glVertexAttribPointer.
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices

    // No data has been loaded into the VBO's for the circular surface yet.
    // This is done by the "SamsRemeshCircularSurf" routine.

    SamsRemeshCircularSurf();

    // FOR THE BACK WALL: ADD YOUR OWN CODE!! 
    // IT WILL BE SIMILAR TO THE FLOOR ABOVE.
    // YOU DO NOT NEED TO REMESH THE BACK WALL - ONE RECTANGLE (TWO TRIANGLES) IS ENOUGH
    float wallverts[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 1.0f,         // Bottom left
         5.0f, 0.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 1.0f,         // Bottom right
         5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          1.0f, 0.0f,         // Top right
        -5.0f, 5.0f, -5.0f,      0.0f, 0.0f, 1.0f,          0.0f, 0.0f,         // Top left
    };
    unsigned int wallElts[] = { 3, 0, 2, 1 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWall]);
    glBindVertexArray(myVAO[iWall]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(wallverts), wallverts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWall]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallElts), wallElts, GL_STATIC_DRAW);

    // FOR THE LEFT WALL: ADD YOUR OWN CODE!! 
    // IT WILL BE SIMILAR TO THE FLOOR ABOVE.
    // YOU DO NOT NEED TO REMESH THE BACK WALL - ONE RECTANGLE (TWO TRIANGLES) IS ENOUGH
    float leftverts[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, 5.0f,      1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Bottom left
         -5.0f, 0.0f, -5.0f,      1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Bottom right
         -5.0f, 5.0f, -5.0f,      1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Top right
        -5.0f, 5.0f, 5.0f,      1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Top left
    };
    unsigned int leftElts[] = { 3, 0, 2, 1 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iLeft]);
    glBindVertexArray(myVAO[iLeft]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(leftverts), leftverts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iLeft]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(leftElts), leftElts, GL_STATIC_DRAW);


    // FOR THE Right WALL: ADD YOUR OWN CODE!! 
    // IT WILL BE SIMILAR TO THE FLOOR ABOVE.
    // YOU DO NOT NEED TO REMESH THE BACK WALL - ONE RECTANGLE (TWO TRIANGLES) IS ENOUGH
    float rightverts[] = {
        // Position              // Normal                  // Texture coordinates
        5.0f, 0.0f, 5.0f,      -1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Bottom left
         5.0f, 0.0f, -5.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // Bottom right
         5.0f, 5.0f, -5.0f,      -1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // Top right
        5.0f, 5.0f, 5.0f,      -1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Top left
    };
    unsigned int rightElts[] = { 2, 1, 3, 0 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iRight]);
    glBindVertexArray(myVAO[iRight]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(rightverts), rightverts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iRight]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(rightElts), rightElts, GL_STATIC_DRAW);




    // FOR THE Base of Bed: ADD YOUR OWN CODE!! 
  // IT WILL BE SIMILAR TO THE FLOOR ABOVE.
  // YOU DO NOT NEED TO REMESH THE BACK WALL - ONE RECTANGLE (TWO TRIANGLES) IS ENOUGH
    float baseverts[] = {
        // Position              // Normal                  // Texture coordinates
        -5.0f, 0.0f, 2.5f,      -1.0f, 0.0f, 0.0f,          0.0f, 0.0f,         // Bottom left
         -5.0f, 1.0f, 2.5f,      -1.0f, 0.0f, 0.0f,          0.0f, 1.0f,         // Bottom left top
         0.0f, 0.0f, 2.5f,      -1.0f, 0.0f, 0.0f,          1.0f, 0.0f,         // bottom right
        0.0f, 1.0f, 2.5f,      -1.0f, 0.0f, 0.0f,          1.0f, 1.0f,         // bottom right top
        0.0f, 0.0f, -2.5f,      -1.0f, 0.0f, 0.0f,          2.0f, 0.0f,         // Bottom left
         0.0f, 1.0f, -2.5f,      -1.0f, 0.0f, 0.0f,          2.0f, 1.0f,         // Bottom left top
         -5.0f, 0.0f, -2.5f,      -1.0f, 0.0f, 0.0f,          3.0f, 0.0f,         // bottom right
        -5.0f, 1.0f, -2.5f,      -1.0f, 0.0f, 0.0f,          3.0f, 1.0f,         // bottom right top
        -5.0f, 0.0f, 2.5f,      -1.0f, 0.0f, 0.0f,          4.0f, 0.0f,         // Bottom left
         -5.0f, 1.0f, 2.5f,      -1.0f, 0.0f, 0.0f,          4.0f, 1.0f,         // Bottom left top

    };
    unsigned int baseElts[] = { 1,0,3,2,5,4,7,6,9,8 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iBase]);
    glBindVertexArray(myVAO[iBase]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(baseverts), baseverts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iBase]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(baseElts), baseElts, GL_STATIC_DRAW);


    // FOR THE Base of Bed: ADD YOUR OWN CODE!! 
// IT WILL BE SIMILAR TO THE FLOOR ABOVE.
// YOU DO NOT NEED TO REMESH THE BACK WALL - ONE RECTANGLE (TWO TRIANGLES) IS ENOUGH
    float topBaseverts[] = {
        // Position              // Normal                  // Texture coordinates
         -5.0f, 1.0f, -2.5f,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Bottom left top
         0.0f, 1.0f, -2.5f,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // bottom right
          -5.0f, 1.0f, 2.5f,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // bottom right top
          0.0f, 1.0f, 2.5f,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // bottom right top

    };
    unsigned int baseTopElts[] = { 0,2,1,3 };
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iBaseTop]);
    glBindVertexArray(myVAO[iBaseTop]);
    glBufferData(GL_ARRAY_BUFFER, sizeof(topBaseverts), topBaseverts, GL_STATIC_DRAW);
    glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);	   // Vertex positions in the VBO
    glEnableVertexAttribArray(vertPos_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));	// Vertex normals in the VBO
    glEnableVertexAttribArray(vertNormal_loc);									// Enable the stored vertices
    glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));	// Vertex texture coordinates in the VBO
    glEnableVertexAttribArray(vertTexCoords_loc);									// Enable the stored vertices
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iBaseTop]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(baseTopElts), baseTopElts, GL_STATIC_DRAW);
    check_for_opengl_errors();      // Watch the console window for error messages!
}

void MyRemeshGeometries() 
{
// IT IS NOT NECESSARY TO REMESH EITHER THE FLOOR OR THE BACK WALL
// YOU DO NOT NEED TO CHANGE THIS FOR PROJECT #6.

    SamsRemeshCircularSurf();
    texSphere.Remesh(meshRes, meshRes);
    texCylinder.Remesh(meshRes, meshRes, meshRes);
    texTorus.Remesh(meshRes, meshRes );

    check_for_opengl_errors();      // Watch the console window for error messages!
}

// **********************************************
// MODIFY THIS ROUTINE TO RENDER THE FLOOR, THE BACK WALL,
//    AND THE SPHERES AND THE CYLINDER. -- WITH TEXTURES
// **********************************************

void MyRenderGeometries() {

    float matEntries[16];       // Temporary storage for floats
    // ******
    // Render the Floor - using a procedural texture map
    // ******
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iFloor]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[4]);
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    // Draw the floor as a single triangle strip
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);    
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();


    if (renderFloorOnly) {
        return;
    }



    // ************ 
    // Render the back wall
    //  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
    //  BUT USE A BITMAP (shaderProgramBitmap) INSTEAD OF A PROCEDURAL TEXTURE.
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glEnable(GL_POLYGON_OFFSET_FILL);
    glPolygonOffset(1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();

    // ************ 
    // Render the left wall
    //  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
    //  BUT USE A BITMAP (shaderProgramBitmap) INSTEAD OF A PROCEDURAL TEXTURE.
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iLeft]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glPolygonOffset(1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[11]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();


    // ************ 
   // Render the right wall
   //  YOU MUST WRITE THIS. IT WILL BE SIMILAR TO THE FLOOR ABOVE. 
   //  BUT USE A BITMAP (shaderProgramBitmap) INSTEAD OF A PROCEDURAL TEXTURE.
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iRight]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    viewMatrix.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!



    // Render the Bed Base
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.02, 0.0, 0.0);
    matDemo.Mult_glScale(1.0, 0.2, 1.0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!




    // Render the Bed BaseTop
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.02, 0.0, 0.0);
    matDemo.Mult_glScale(1.0, 0.2, 1.0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!



    // Render the mattress
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.2, 0.0, 0.0);
    matDemo.Mult_glScale(0.9, 0.8, 0.8);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[9]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // Render the mattress Top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.2, 0.0, 0.0);
    matDemo.Mult_glScale(0.9, 0.8, 0.8);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    //glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[9]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();


    // Render the Bedback
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.68, 0.0, 0.0);
    matDemo.Mult_glScale(0.06, 2.0, 1.0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!




    // Render the Bedbacktop
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.68, 0.0, 0.0);
    matDemo.Mult_glScale(0.06, 2.0, 1.0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    check_for_opengl_errors();      // Watch the console window for error messages!
    // *************
    // Render two spheres and a cylinder
    // YOU MUST MODIFY THE CODE BELOW, AND ADD TEXTURES TO THE SPHERE AND THE CAPS OF THE CYLINDER.

    // Render orb decoration on nightstand
    //  YOU DO NOT NEED TO MODIFY THIS SPHERE OR ITS TEXTURE MAP
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.5, 1.2, 3.3);
    matDemo.Mult_glScale(0.3, 0.3, 0.3);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[3]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render a sphere with a texture map 
    // ADD A TEXTURE MAP TO THIS SPHERE - SIMILAR TO THE CODE ABOVE
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate( 3.5, 1.1, 0.4);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[5]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);
    //texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);

    // Render pillow1 
    // YOU MAY LEAVE THE TEXTURE MAP ON THE SIDE OF THE CYLINDER
    // YOU MUST ADD TEXTURE MAPS TO THE TOP AND BOTTOM FACES OF THE CYLINDER
    // NOTE THERE ARE SEPARATE RENDER COMMANDS FOR THE THREE PARTS OF THE CYLINDER.
    // YOU WILL ALSO CHANGE THE ORIENTATION OF THE CYLINDER
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.3, 0.9, 0.8);
    matDemo.Mult_glRotate(1.57, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.45, 0.6, 0.23);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[15]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[15]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);



    // Render pillow2
    // YOU MAY LEAVE THE TEXTURE MAP ON THE SIDE OF THE CYLINDER
    // YOU MUST ADD TEXTURE MAPS TO THE TOP AND BOTTOM FACES OF THE CYLINDER
    // NOTE THERE ARE SEPARATE RENDER COMMANDS FOR THE THREE PARTS OF THE CYLINDER.
    // YOU WILL ALSO CHANGE THE ORIENTATION OF THE CYLINDER
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.3, 0.9, -0.8);
    matDemo.Mult_glRotate(1.57, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.45, 0.6, 0.23);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[15]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[15]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    // Render the nightstand1 base
     matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.1, 0.0, 3.3);
    matDemo.Mult_glScale(0.17, 0.4, 0.23);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render knob 1 
    // YOU MAY LEAVE THE TEXTURE MAP ON THE SIDE OF THE CYLINDER
    // YOU MUST ADD TEXTURE MAPS TO THE TOP AND BOTTOM FACES OF THE CYLINDER
    // NOTE THERE ARE SEPARATE RENDER COMMANDS FOR THE THREE PARTS OF THE CYLINDER.
    // YOU WILL ALSO CHANGE THE ORIENTATION OF THE CYLINDER
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.1, 0.2, 3.3);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.03, 0.02);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    // Render knob handle1 on nightstand
    //  YOU DO NOT NEED TO MODIFY THIS SPHERE OR ITS TEXTURE MAP
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.06, 0.2, 3.3);
    matDemo.Mult_glScale(0.02, 0.05, 0.05);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render the nightstand base2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.1, 0.4, 3.3);
    matDemo.Mult_glScale(0.17, 0.4, 0.23);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render knob 2 
    // YOU MAY LEAVE THE TEXTURE MAP ON THE SIDE OF THE CYLINDER
    // YOU MUST ADD TEXTURE MAPS TO THE TOP AND BOTTOM FACES OF THE CYLINDER
    // NOTE THERE ARE SEPARATE RENDER COMMANDS FOR THE THREE PARTS OF THE CYLINDER.
    // YOU WILL ALSO CHANGE THE ORIENTATION OF THE CYLINDER
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.1, 0.6, 3.3);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.03, 0.02);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[7]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    // Render knob handle2 on nightstand
    //  YOU DO NOT NEED TO MODIFY THIS SPHERE OR ITS TEXTURE MAP
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.06, 0.6, 3.3);
    matDemo.Mult_glScale(0.02, 0.05, 0.05);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // Render the nightstand1 top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.1, 0.0, 3.3);
    matDemo.Mult_glScale(0.17, 0.8, 0.23);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    // Renders a textured torus in the back left corner.
    // matDemo = viewMatrix;
    // matDemo.Mult_glTranslate(-4.0, 0.3, -3.0);
    // matDemo.Mult_glScale(0.8, 0.2, 0.8);
    // matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    // glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    // glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    // glUniform1i(applyTextureLocation, true);            // Enable applying the texture!
    // texTorus.Render();                                  // Render the torus
    // glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    

    //render small table base
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 0.05, -4.0);
    matDemo.Mult_glScale(0.35, 0.05, 0.35);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    //texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    //render table pole
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 0.6, -4.0);
    matDemo.Mult_glScale(0.05, 0.5, 0.05);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    //texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    //render table top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 1.1, -4.0);
    matDemo.Mult_glScale(0.6, 0.02, 0.6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    //texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    // **************
    // Render the circular surface on table
    selectShaderProgram(shaderProgramBitmap);
    SamsRenderCircularSurf();

    // Render the sofa base
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.4, 0.0, -3.5);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.3, 0.4, 0.25);

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render the sofabase bottom
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.4, 0.0, -3.5);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.3, 0.25, 0.25);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying  texture!


    // Render the sofaR
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.4, 0.4, -3.5);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.02, 0.6, 0.25);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!




    // Render the sofaRtop
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.4, 0.4, -3.5);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.02, 0.6, 0.25);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render the sofaL
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.035, 0.4, -3.85);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.02, 0.6, 0.25);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!




    // Render the sofaLtop
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.035, 0.4, -3.85);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.02, 0.6, 0.25);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render the sofaback
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.52, 0.2, -4.0);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glRotate(-0.15, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.3, 1.5, 0.05);

    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render the sofa back top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.52 , 0.2, -4.0);
    matDemo.Mult_glRotate(-0.25, 0.0, 1.0, 0.0);
    matDemo.Mult_glRotate(-0.15, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.3, 1.5, 0.05);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    //render cushion

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.65, 0.4, -3.7);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glRotate(-0.25, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.15, 0.7, 0.6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[16]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[16]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    //CUSHION2  
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.65, 0.6, -3.7);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glRotate(-0.25, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.2, 0.7, 0.6);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[16]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[16]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);

    //CUSHION3
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.8, 0.9, -4.1);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glRotate(-0.25, 1.0, 0.0, 0.0);
    matDemo.Mult_glRotate(0.20, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.75, 0.63, 0.1);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[16]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[16]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    //CUSHION4
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(1.7, 0.94, -3.86);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glRotate(-0.25, 1.0, 0.0, 0.0);
    matDemo.Mult_glRotate(0.34, 0.0, 1.0, 0.0);
    matDemo.Mult_glScale(0.3, 0.4, 0.16);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[2]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    // Render the projectortp
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 4.5, 0.0);
    matDemo.Mult_glScale(0.06, 0.35, 1.0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!




    // Render the projectortp top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 4.5, 0.0);
    matDemo.Mult_glScale(0.06, 0.35 , 1.0);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // Render the projector screen
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.86, 1.8, 0.0);
    matDemo.Mult_glScale(0.01, 3.0, 0.95);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[tv]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    //rightside desk thingy
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 0.0, 0.0);
    matDemo.Mult_glScale(0.17, 1.25, 0.95);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glPolygonOffset(1.0, 1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    //deskthingy top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 0.0, 0.0);
    matDemo.Mult_glScale(0.17, 1.25, 0.95);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[14]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    //speakerR base
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 0.0, 2.92);
    matDemo.Mult_glScale(0.17, 2.6, 0.22);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    //speaker top R
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 0.0, 2.92);
    matDemo.Mult_glScale(0.17, 2.6, 0.22);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    //speakerL base
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 0.0, -2.92);
    matDemo.Mult_glScale(0.17, 2.6, 0.22);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[12]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!
    //speaker top L
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(4.99, 0.0, -2.92);
    matDemo.Mult_glScale(0.17, 2.6, 0.22);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[10]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!



    // shelfpiece 1
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.65, 2.0, -4.795);
    matDemo.Mult_glScale(0.02, 2.0, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece1top
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.65, 2.0, -4.795);
    matDemo.Mult_glScale(0.02, 2.0, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece 2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.75, 3.4, -4.795);
    matDemo.Mult_glRotate(1.57,0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 2.0, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece1top2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.75, 3.4, -4.795);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 2.0, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece 3
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.75, 2.4, -4.795);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 1.5, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece1top3
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.75, 2.4, -4.795);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 1.5, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece 4
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.65, 2.0, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 1.3, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece1top4
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.65, 2.0, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 1.3, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!



    // shelfpiece 5
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.65, 2.8, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 2.0, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece1top5
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.65, 2.8, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 2.0, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfpiece 6
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.65, 3.9, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 1.8, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    


    // shelfboxR
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.85, 4.0, -4.795);
    matDemo.Mult_glScale(0.02, 0.5, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfboxL
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.5, 4.0, -4.795);
    matDemo.Mult_glScale(0.02, 0.5, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfboxT
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.6, 4.5, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.75, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.6, 4.5, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.75, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.85, 4.6, -4.795);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.75, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    ////////

    // shelfboxR2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.75, 2.9, -4.795);
    matDemo.Mult_glScale(0.02, 0.5, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfboxL
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.4, 2.9, -4.795);
    matDemo.Mult_glScale(0.02, 0.5, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    // shelfboxT
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.5, 3.4, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.75, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.5, 3.4, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.75, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.75, 3.5, -4.795);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.75, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!




    ////////

   // shelfboxR3
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-3.5, 2.4, -4.795);
    matDemo.Mult_glScale(0.02, 0.5, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // shelfboxT
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-3.6, 2.9, -4.795);
    matDemo.Mult_glRotate(-1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.85, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBase]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 10, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.85, 3.0, -4.795);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(0.02, 0.75, 0.08);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    //books on shelf1
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.1, 2.8, -4.2);
    matDemo.Mult_glScale(0.06, 0.14, 0.1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[19]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);

    //books on shelf2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-1.2, 3.9, -4.2);
    matDemo.Mult_glScale(0.06, 0.13, 0.1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[19]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);


    //books on shelf3
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-3.1, 2.3, -4.2);
    matDemo.Mult_glScale(0.08, 0.13, 0.1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[19]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);

    //clock
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-3.75, 3.9, -4.8);
    matDemo.Mult_glRotate(1.57, 1.0, 0.0, 0.0);
    matDemo.Mult_glRotate(-0.20, 1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.5, 0.1, 0.5);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    texCylinder.RenderTop();
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[20]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    //texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);


    //basketball
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-2.0, 3.2, -4.7);
    matDemo.Mult_glRotate(0.1,1.0, 0.0, 0.0);
    matDemo.Mult_glScale(0.3, 0.3, 0.3);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glBindTexture(GL_TEXTURE_2D, TextureNames[21]);     // Choose Earth image texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texSphere.Render();                                 // Render the sphere
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!


    //painting1
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.8, 2.0, -4.5);
    matDemo.Mult_glScale(0.1, 0.5, 0.1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
   // glEnable(GL_POLYGON_OFFSET_FILL);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[28]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);


    //painting1
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.8, 2.0, -4.5);
    matDemo.Mult_glScale(0.1, 0.5, 0.1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[28]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);

    //painting2
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(2.3, 2.0, -4.5);
    matDemo.Mult_glScale(0.1, 0.5, 0.1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[29]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);


    //painting3
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(3.8, 2.0, -4.5);
    matDemo.Mult_glScale(0.1, 0.5, 0.1);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iWall]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[30]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);


    //tv counter thingy
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.86, 0.0, 0.0);
    matDemo.Mult_glScale(1.0, 0.24, 0.48);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iRight]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[13]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    // blanket thingy
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-0.2, 0.0, 0.0);
    matDemo.Mult_glScale(0.7, 0.8, 0.8);
    selectShaderProgram(shaderProgramBitmap);
    glBindVertexArray(myVAO[iBaseTop]);                // Select the floor VAO (Vertex Array Object)
    materialUnderTexture.LoadIntoShaders();         // Use the bright underlying color
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    //glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[31]);
    glUniform1i(applyTextureLocation, true);
    glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
    glUniform1i(applyTextureLocation, false);           // Turn off applying texture!

    //window
    matDemo = viewMatrix;
    matDemo.Mult_glTranslate(-4.94, 3.3, 0.0);
    matDemo.Mult_glRotate(1.57, 0.0, 0.0, 1.0);
    matDemo.Mult_glScale(1.3, 0.03, 1.3);
    matDemo.DumpByColumns(matEntries);           // Apply the model view matrix
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
    glPolygonOffset(-1.0, -1.0);
    glBindTexture(GL_TEXTURE_2D, TextureNames[0]);     // Choose texture
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
    texCylinder.RenderSide();                             // Render the sphere side
    glUniform1i(applyTextureLocation, false);             // Turn off applying texture!
    glBindTexture(GL_TEXTURE_2D, TextureNames[32]);     // Choose texture
    glUniform1i(applyTextureLocation, true);
    texCylinder.RenderTop();                              // RENDER THIS WITH A TEXTURE MAP
    //texCylinder.RenderBase();                             // RENDER THIS WITH A TEXTURE MAP
    glUniform1i(applyTextureLocation, false);
}

void SamsRenderCircularSurf()
{
    float matEntries[16];       // Temporary storage for floats

    glBindVertexArray(myVAO[iCircularSurf]);

    // Calculate the model view matrix for the circular surface
    LinearMapR4 matDemo = viewMatrix;
    matDemo.Mult_glTranslate(0.0, 1.2, -3.85);     // Center in the back & raise up
    matDemo.Mult_glScale(0.025, 0.1, 0.025);         // Adjust the circular diameter and height

                                                 // Set the uniform values (they are not stored with the VAO and thus must be set again everytime
    materialUnderTexture.LoadIntoShaders();                       // Use the bright underlying material
    matDemo.DumpByColumns(matEntries);
    glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries); // Select the modelview matrix to place it
    glBindTexture(GL_TEXTURE_2D, TextureNames[1]);     // Choose Mandala texture
    // ONCE YOU HAVE TEXTURE COORDINATES FOR THE CIRCULAR SURFACE, PUT THE NEXT LINE BACK IN.
    glUniform1i(applyTextureLocation, true);           // Enable applying the texture!
                                                                   // Draw the the triangle strips
    for (int i = 0; i < meshRes; i++) {
        glDrawElements(GL_TRIANGLE_STRIP, 1 + 2 * meshRes, GL_UNSIGNED_INT,
            (void*)(i * (1 + 2 * meshRes) * sizeof(unsigned int)));
    }
    glUniform1i(applyTextureLocation, false);           // Disable applying the texture!
}


// *******
// ADD TEXTURE COORDINATES TO EITHER YOUR OWN "MyRemeshCircularSurf" or
// TO THE PROVIDED "SamsRemeshCircularSurf"
// IF YOU USE YOUR OWN, ALSO REPLACE "SamsRenderCircularMesh" WITH YOUR
// OWN "MyRenderCircularMesh" IF NEEDED.
// TASKS FOR ADDING TEXTURE COORDINATES:
//    a. Change stride to 8*sizeof(float) instead 6*sizeof(float).
//    b. Be sure to allocate enough memory for circularVerts[].
//    c. Calculate the (s,t) texture coordinates, put them in the array.
//    d. Update the calls to glVertexAttribPointer and glEnableVertexAttribArray
//         in the routine MySetupSurfaces above.  
//       And, add new calls for the texture coordinates.

void SamsRemeshCircularSurf()
{
    // Circular surface vertices.
    int numCircularVerts = 1 + meshRes * meshRes;
    float* circularVerts = new float[8 * numCircularVerts];
    // Circular surface elements (indices to vertices in a triangle strip)
    int numCircularElts = meshRes * (1 + 2 * meshRes);
    unsigned int* circularElements = new unsigned int[numCircularElts];

    float* toPtr = circularVerts;
    *(toPtr++) = 0.0f;      // Center point
    *(toPtr++) = 1.0f;
    *(toPtr++) = 0.0f;
    *(toPtr++) = 0.0f;      // Center normal
    *(toPtr++) = 1.0f;
    *(toPtr++) = 0.0f;
    *(toPtr++) = 0.5f;      // center texture
    *(toPtr++) = 0.5f;
    for (int i = 0; i < meshRes; i++) {
        float theta = (float)PI2 * ((float)i) / (float)meshRes;
        float c = cosf(theta);
        float s = sinf(theta);
        float partialC = -s;
        float partialS = c;
        VectorR3 partialTheta(partialC, 0.0, partialS);
        for (int j = 1; j <= meshRes; j++) {
            float r = 2.9f * (float)PI * ((float)j) / (float)meshRes;
           // float range = (float) j / meshRes;
            float x = r;
            float dampingFactor = 0.08f;
            float fff = (float)(1.0 + dampingFactor * r * r);
            float y = j==0 ? 1.0f : fff*sin(r)/r;
            float xprime = 1.0;
            float yprime = (x * cosf(x) + sinf(x)) / (x + 1.0f) - x * sinf(x) / ((x + 1.0f) * (x + 1.0f));
            VectorR3 partialR((double)(c * xprime), yprime, (double)(s * xprime));
            *(toPtr++) = c * x;                 // (i,j) point
            *(toPtr++) = y;
            *(toPtr++) = s * x;
            VectorR3 normal = -partialR * partialTheta;
            normal.Normalize();
            *(toPtr++) = (float)normal.x;      // (i,j) normal
            *(toPtr++) = (float)normal.y;
            *(toPtr++) = (float)normal.z;
            *(toPtr++) = c * (((float)j / meshRes) / 3.4) +0.5;
            *(toPtr++) = s * (((float)j / meshRes) / 3.4) +0.5;

       }
    }

    unsigned int* toElt = circularElements;
    for (int i = 0; i < meshRes; i++) {
        *(toElt++) = 0;         // Central vertex
        for (int j = 0; j < meshRes; j++) {
            *(toElt++) = ((i + 1) % meshRes) * meshRes + j + 1;
            *(toElt++) = i * meshRes + j + 1;
        }
    }

    glBindVertexArray(myVAO[iCircularSurf]);
    glBindBuffer(GL_ARRAY_BUFFER, myVBO[iCircularSurf]);
    glBufferData(GL_ARRAY_BUFFER, 8 * numCircularVerts * sizeof(float), circularVerts, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iCircularSurf]);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, numCircularElts * sizeof(unsigned int), circularElements, GL_STATIC_DRAW);

    delete[] circularVerts;
    delete[] circularElements;
}

